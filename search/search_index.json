{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RoboConnect","text":"<p>RoboConnect is an un-opinoinated, robot abstration layer for TwinCAT.</p> <p>Get Started  Go to GitHub </p>"},{"location":"#simplifying-integration-of-robotics","title":"Simplifying Integration of Robotics.","text":"<p>It is a generic library providing robot functionality to TwinCAT (TC) users. It simplifies integration of any robot into the TwinCAT system by providing a common set of functionalities to PLC developers. It is designed to be familiar to users of Beckhoff\u2019s Motion library, TC_MC2, but can also be used with Object Oriented Programming (OOP) techniques.</p> <p>RoboConnect is an open-source library, available on an MIT license, meaning it can be used and modified without consent or attribution. </p> <p>There is no requirement for users of RoboConnect to make their libraries open source or freely available. HOwever, if you users are making a new connectivity library for a particular robot brand &amp; model, it will help the community grow to make this open source, either through the RoboConnect organisation's GitHub, or through their own public repo.</p>"},{"location":"#one-abstraction-many-robots","title":"One Abstraction, Many Robots","text":"<p>RoboConnect is an abstraction layer. It does not offer any out-of-the box kinematics. RoboConnect does not natively handle kinematics. It is designed to be an abstraction around robot controllers, such that one robot controller can be switched for another, with no change to the PLC code required to control it (if the degrees of freedom, reach and load capabilities match). RoboConnect can be used with robots of any given form, from two axes upwards. </p> <p>It provides functionality to move robots in joint or cartesian space but does not place limitations on the degrees of freedom, or the shape and relationship of the kinematic chain. RoboConnect does not provide the kinematic solutions, they are delegated to something else. Typically, this will be a dedicated robot controller, but it could also be a cartesian or delta robot running directly on the Beckhoff NC, an XY gantry or anything else in between. </p> <p></p>"},{"location":"#maximising-reuse-of-application-code-minimising-special-code","title":"Maximising Reuse of application code, minimising \"special\" code.","text":"<p>Commonly in projects with robot integrations, a custom interface is derived between PLC and robot, with a mechanism for requesting certain jobs and perhaps passing data for a job and receiving results forming part of the interface. RoboConnect aims to move beyond this, giving end users the ability to write their application code in a familiar way within the PLC, then reuse that functionality against any robot supporting the interface.</p> <p></p>"},{"location":"#challenges-with-diverse-robot-apis","title":"Challenges with Diverse Robot APIs:","text":"<ul> <li>Varied Commands &amp; Protocols: Necessitates constant adaptation, increasing the learning curve.</li> <li>Increased Development Time: Each unique API extends the timeline for integration and deployment.</li> <li>Complex Maintenance: Independent API evolutions complicate updates and system maintenance.</li> <li>Integration Difficulties: Makes it challenging to integrate and manage multiple robotic systems.</li> </ul>"},{"location":"#benefits-of-a-common-interface","title":"Benefits of a Common Interface:","text":"<ul> <li>Uniform Command Set: Simplifies development with standardised interactions.</li> <li>Code Reusability &amp; Maintenance: Reduces repetitive coding and simplifies updates.</li> <li>Accelerated Deployment: Streamlines the integration process, shortening development cycles.</li> <li>Enhanced Scalability: Facilitates simplified addition and integration of new robots.</li> <li>Focus on Innovation: Frees resources to improve and innovate on robotic functionalities.</li> </ul>"},{"location":"coding-guide/","title":"Coding Guide","text":"<p>Clean code is simple and direct. Clean code reads like well-written prose. Clean code never obscures the designer\u2019s intent but rather is full of crisp abstractions and straightforward lines of control. - Grady Booch author of Object Oriented Analysis and Design with Applications</p>"},{"location":"coding-guide/#opening-statement","title":"Opening Statement","text":"<p>This coding guide has been created to help keep our code base clean and tidy.  It will act as a base for those of you who have not settled on a standard, and will impose rules on those of you who wish to contribute.  </p>"},{"location":"coding-guide/#symbol-naming","title":"Symbol Naming","text":""},{"location":"coding-guide/#intent","title":"Intent","text":"<p>Use names which both reveal your intent and removes the need for supplementing your code with comments.  </p> <pre><code>// Put the UPS in to full capacity mode if the Power Supply 10 is in fault\nIF SUP_10.flt THEN \n    UPS.smode := 1;\nEND_IF\n</code></pre> <p>The example above has been renamed and refactored to remove the comment.  This allows us to read the code without placing any mental obstacles in the way of our understanding.  </p> <pre><code>IF powerSupply10.HasFault THEN \n    UPS.mode := FULL_CAPACITY_MODE;\nEND_IF\n</code></pre>"},{"location":"coding-guide/#avoid-abbreviations","title":"Avoid abbreviations","text":"<p>Where possible, do not abbreviate.  This forces us to think, decode and remember a term.  Every time we give our brain something to do it forces it to work harder.  Instead favour whole words and phrases so that our mind can stay on auto-pilot when reading our code.  </p> <pre><code>   VAR strBtn : BOOL;\n</code></pre> <p>It may seem only a small step, but the brain power that we have saved not decoding an abbreviation can be used for other more creative or fault finding tasks. </p> <pre><code>   VAR startButton : BOOL;\n</code></pre>"},{"location":"coding-guide/#prefix-and-suffix","title":"Prefix and Suffix","text":"<p>There is only one instance in which a prefix is allowed and this is on a symbol for a pointer as it will visually remind you to dereference the pointer before use.</p> <pre><code>   VAR pMessage : POINTER TO Message;\n</code></pre> <p>The p prefix will alert the programmer to correctly dereference the pointer using ^.</p> <pre><code>   pMessage^.DoSomething(); // the symbol ^ is the dereference operator\n</code></pre> <p>!&gt; Prefix and Suffix are visual obstacles and as such they impair our natural ability to read.  Hungarian notation will only obscure your code with no benefit to the reader so you should look to remove this at all times.  </p>"},{"location":"coding-guide/#comments","title":"Comments","text":"<p>Ask yourself 'why do I need a comment?' </p> <p>If you need them to convey your code's true meaning then you should refactor and rename your variables to make your Intent clear.  </p> <p>Do not use them for auditing, changes, author.  This adds extra work to the coders following you and they will be missed and become out of date.  Favour source control instead.   </p> <p>Comments must not be used to, * explain how your code works (Rename / Refactor) * comment out old code (Delete it and use Source Control) * add author information (use Source Control)</p> <p>Comments may be use * as place holders or for general information.    </p> <pre><code>IF PowerSupply10.HasFault THEN \n    // Custom fault reaction code may go here...\nEND_IF\n</code></pre> <p>Remember, no comments are the best form of comments!</p>"},{"location":"coding-guide/#enumeration","title":"Enumeration","text":""},{"location":"coding-guide/#global-enumeration","title":"Global Enumeration","text":"<p>Global Enumeration should be kept to a minimum as this will cause tight coupling between objects which use them.  Tight coupling is a bad thing.  Try instead to replace global enumeration with other objects which can be passed around.</p>"},{"location":"coding-guide/#local-enumeration","title":"Local Enumeration","text":"<p>Enumeration inside of a class is good and will make CASE statements easier to use and extend.  Use inline enumeration as shown below.  This keeps internal state locked away inside a class and prevents us needing to manage this enumeration in a second file.   </p> <p>Enumeration must be ALL_CAPITALS with underscore word separation.</p> <pre><code>FUNCTION_BLOCK Cylinder \nVAR\n    state : (RETRACTED, EXTENDING, EXTENDED, RETRACTING, JAMMED_EXTENDING, JAMMED_RETRACTING);\nEND_VAR\n</code></pre> <pre><code>CASE state OF\n    RETRACTED: \n        // \n    EXTENDING: \n        // \n//...\nEND_CASE\n</code></pre>"},{"location":"coding-guide/#constants","title":"Constants","text":"<p>Constants must be ALL_CAPITALS with underscore word separation.</p> <p>Replace \"Magic numbers\" with constants to assist with readability and understanding.  </p> <pre><code>VAR CONSTANT\n\n    MAXIMUM_BUFFER_SIZE_IN_BYTES : UDINT := 200;\n\nEND_VAR\n</code></pre>"},{"location":"coding-guide/#class","title":"Class","text":"<p>In the IEC standard there is no keyword for Class, instead you must use a Function Block with the attributes shown below. You should decorate your classes with the no_explicit_call attribute to prevent if from being used as a standard IEC Function Block. </p> <pre><code>{attribute 'linkalways'} \n{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}\n{attribute 'enable_dynamic_creation'}\n</code></pre> <p>!&gt;You must not place code in the FUNCTION_BLOCK body.  Use a public method instead, such as .CyclicCall();</p> <p>!&gt;You must not allow VAR_INPUT, VAR_OUTPUT and VAR_IN_OUT to exist in a class declaration. </p>"},{"location":"coding-guide/#naming","title":"Naming","text":"<p>Always use PascalCase for class names.  You should use noun or noun phrase for class names.  Do not use prefixes.  An underscore may be used if the class is typed and it assists with overall the readability.</p> <pre><code>FUNCTION_BLOCK AnalogValue_LREAL EXTENDS AnalogValue\n// VAR_INPUT, VAR_OUTPUT and VAR_IN_OUT is not permitted here.\nVAR\n\nEND_VAR\n</code></pre>"},{"location":"coding-guide/#private-variables","title":"Private Variables","text":"<p>Private variables must be camelCase.</p> <p>Private variables which share the same name as a Property must be prefixed with an underscore.  Try to avoid this type of name clash where possible.   </p>"},{"location":"coding-guide/#example","title":"Example","text":"<pre><code>{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'} \nFUNCTION_BLOCK Cylinder EXTENDS ComponentBase IMPLEMENTS I_Move\nVAR\n    _isBusy : BOOL; // underscore required if there is an IsBusy property\n    state : (RETRACTED, EXTENDING, EXTENDED, RETRACTING, JAMMED_EXTENDING, JAMMED_RETRACTING);\n    retractedSensor : I_Sensor;\n    extendedSensor : I_Sensor;\nEND_VAR\n</code></pre> <pre><code>// The body of a class must not be used for code.  \n// Cyclic code should be called from a method if needed. \n</code></pre>"},{"location":"coding-guide/#methods","title":"Methods","text":"<p>Classes may use methods.  Methods in a Function Block or Program should be avoided at all costs. </p> <p>Methods, like classes should have one reason to exist.  They  should do one job and do it well.    </p>"},{"location":"coding-guide/#naming_1","title":"Naming","text":"<p>Always use PascalCase for method names.  You should use verb or verb phrase for method names.  Do not use prefixes. </p> <pre><code>cylinder.Retract();\npersistentData.Save();\n</code></pre> <p>!&gt;Methods should not have the word 'and' in them as this is a sure sign that they are doing more than one job.</p>"},{"location":"coding-guide/#arguments","title":"Arguments","text":"<p>Methods should have as few arguments as possible.  Zero arguments is best.  One argument is ok.  Two arguments is almost too many.  Try to pass objects in to methods in order to reduce argument count.  Avoid Boolean arguments as this is typically a sign that a method is dual purpose. </p> <pre><code>// example of a bad method\ncsvReader.LoadFileAndParseResultsToArrayIfLoggingIsEnabled('file.csv',resultsArray,Logging.IsEnabled);\n</code></pre> <p>The example above has been refactored to divide the method in to smaller methods with smaller number of arguments.</p> <pre><code>IF logging.IsEnabled THEN\n    csvReader.LoadFile('file.csv');\n    csvReader.ParseToArray(resultsArray);\nEND_IF\n</code></pre>"},{"location":"design_guide/","title":"Design Guide","text":"<p>The full design guide can be found in the SPT Framework documentation.</p>"},{"location":"exampleProject/","title":"Example Project","text":""},{"location":"exampleProject/#intro","title":"Intro","text":"<p>In this exaple we set up and use a robot for a pick and place sequnece. The two robots we have as an example are the Dobot Nova 5 and Dobot Mg400. We use both robots agnostically by assigning RoboConnect to either one of the implemented examples. </p>"},{"location":"exampleProject/#program","title":"Program","text":"<p>In the program there is a simple state machine to initialise connect and start out pick and place sequence. After the sequence is completed we can disable and disconnect from the robot. The program also comes with a small HMI for operation. </p> <p></p> <p>In the HMI there is command buttons for connecting, starting the sequence, disabling and disconnecting. With feedback for cartesian positions and joint positions. Below is an event logger for the program.</p>"},{"location":"exampleProject/#usage","title":"Usage","text":"<p>To use the program, first decide whether the Mg400 or the Nova 5 is your target robot. Comment out the ip address of the robot you are not using. Then activate the configuration and open the HMI. Normal operation would involve, connecting and starting the sequence. After starting the seuqnce the robot will enable, move to pick and cycle through the pick and place trajectory. </p> <p>Once the program is completed it is important to disable the robot and disconnect. </p>"},{"location":"exampleProject/#explanation","title":"Explanation","text":""},{"location":"exampleProject/#set-up-configuring","title":"Set Up &amp; Configuring","text":"<p>The program will only run the code RoboConnect after the interface has been set. </p> <pre><code>IF RoboConnect &lt;&gt; 0 THEN\n  RoboConnect.CyclicLogic();\nEND_IF \n</code></pre> <p>In the initlaisation state logging parameters are set, this is for generic logging and ties the HMI event logger to the main logger so no work is done twice. After that we configure the Robot. </p> <pre><code>  Init:\n    Intecre_Utilities.LogConfig.LogLevel := E_LogSeverity.Debug;\n    Intecre_Utilities.LogConfig.ExternalLogger := hmiLogger;\n    ConfigureDobotTypeAndPositions();\n\n    logger.LogInfo('Initialised');\n    state := DISCONNECTED;\n</code></pre> <p>This is the most important step in setting RoboConnect. For simplicity, if the corosponing ip address is set then configure the robot. In this case the kinnematics of the robot is different so there is another set of positions for the pick and place. If however, the robots had the same reach then the same set of positions could be used. </p> <pre><code>{IF defined (variable: ipNova)}\nCrNova.SetConnectionProperties(ipNova);\nRoboConnect := CrNova;\nhomePosition := homePositionCr;\nhoverPlacePosition := hoverPlacePositionCr;\nplacePosition := placePositionCr;\nreadyToPickPosition := readyToPickPositionCr;\npickPosition := pickPositionCr;\n\n{ELSIF defined (variable: ipMg400)}\nMg400.SetConnectionProperties(ipMg400);\nRoboConnect := Mg400;\nhomePosition := homePositionMg;\nhoverPlacePosition := hoverPlacePositionMg;\nplacePosition := placePositionMg;\nreadyToPickPosition := readyToPickPositionMg;\npickPosition := pickPositionMg;\n\n{ELSE}\n{error 'Missing Connection properties.'}\n{END_IF}\n</code></pre> <p>Specifically RoboConnect := CrNova; will set the instance of RoboConnect we are using in the program. </p> <p>CrNova.SetConnectionProperties(ipNova); is not a method of RoboConnect. We have to extend the robot to give custom information that our instance of RoboConnect needs. In this case we are connecting via TCP so the ip adress must be set. This however, could be changed to anything that we need. For example, a modbus connection.</p>"},{"location":"exampleProject/#connecting","title":"Connecting","text":"<p>Very simply we call connect and wait till the robot is connected. Since we set out connection properties our instance of RoboConnect will do whatever it needs to connect behind in the concrete type. </p>"},{"location":"exampleProject/#running-the-trajectory","title":"Running The Trajectory","text":"<p>In this example there is a small trajectory runner to cycle through the pick and place commands. </p> <p>First the robot is enabled. Each command in RoboConnect will output a task. This task can be tracked to follow its progress. </p> <p>First issue the command and return the task. If the result of the task is empty then there is an error. Query the task to see if its done or there is an error in the task.  </p> <p>An error in the task might be an invalid parameter. </p> <pre><code>  REQUEST_ENABLE:\n    IF StateChanged() THEN\n      RoboConnect.Enable(task =&gt; resultTask);\n    END_IF\n\n    IF resultTask = 0 THEN\n      logger.LogError('result task is null');\n      state := ERROR_STATE;\n\n    ELSIF resultTask.Error THEN\n      state := ERROR_STATE;\n\n    ELSIF resultTask.Done THEN\n      state := WAIT_FOR_ENABLED;\n    END_IF\n</code></pre> <p>After this the robot moves to the start position and waits till it is in the start position. RoboConnect comes with an inposition method and can also be configurable to determin the distance for being in position.</p> <pre><code>  REQUEST_START_POSITION:\n    IF StateChanged() THEN\n      RoboConnect.MoveAbs(point := homePosition, task =&gt; resultTask);\n    END_IF\n\n    IF resultTask = 0 THEN\n      logger.LogError('result task is null');\n      state := ERROR_STATE;\n\n    ELSIF resultTask.Error THEN\n      state := ERROR_STATE;\n\n    ELSIF resultTask.Done THEN\n      state := WAIT_FOR_START_POSITION;\n    END_IF\n\n  WAIT_FOR_START_POSITION:\n    StateChanged();\n\n    IF RoboConnect.IsAtCartesianPosition(homePosition) THEN\n      state := GOTO_READY_TO_PICK_POS;\n    END_IF\n</code></pre> <p>Then the program will start the pick and place sequnece. T_TrajectoryRunner will cycle through the points issuing the commands. After the positions have been executed the state will return to IDLE state. </p> <pre><code>      REQUEST_PICK_AND_PLACE:\n\n    IF StateChanged() THEN\n      trajectoryRunner(\n        execute := FALSE\n      );\n\n      movePositions[1] := readyToPickPosition;\n      movePositions[2] := pickPosition;\n      movePositions[3] := readyToPickPosition;\n      movePositions[4] := hoverPlacePosition;\n      movePositions[5] := placePosition;\n      movePositions[6] := hoverPlacePosition;\n      movePositions[7] := homePosition;\n      movesInTrajectory := 7;\n\n    END_IF\n\n    TrajectoryRunner(\n      targetRobot := RoboConnect,\n      trajectory := movePositions,\n      moveCount := movesInTrajectory,\n      execute := TRUE\n    );\n\n    IF TrajectoryRunner.Error THEN\n      state := ERROR_STATE;\n\n    ELSIF TrajectoryRunner.Done THEN\n      state := IDLE;\n\n    END_IF\n</code></pre> <p>Also there are command for disabling and disconnecting the robot. Disable works the same as enable but issuing the disable command. </p> <pre><code>  REQUEST_DISABLE:\n    IF StateChanged() THEN\n      RoboConnect.Disable(task =&gt; resultTask);\n    END_IF\n\n    IF resultTask = 0 THEN\n      logger.LogError('result task is null');\n      state := ERROR_STATE;\n\n    ELSIF resultTask.Error THEN\n      state := ERROR_STATE;\n\n    ELSIF resultTask.Done THEN\n      state := WAIT_FOR_DISABLE;\n    END_IF\n\n  WAIT_FOR_DISABLE:\n    StateChanged();\n\n    IF NOT RoboConnect.Enabled THEN\n      state := IDLE;\n    END_IF\n</code></pre> <p>Disconnect will disconect from the tcp sockets. This is important to do when using the dobot. Id the connection is not properly ended then it cannont connect again and a reboot of the robot is required.</p> <pre><code>  DISCONNECT:\n    StateChanged();\n    RoboConnect.Disconnect();\n    state := DISCONNECTED;\n</code></pre>"},{"location":"manufacturer-adding-support-for-robot/","title":"Adding Support for New Robots","text":"<p>RoboConnect is not just a collection of user-facing code, but a backend library that helps manufacturers integrate their robots with TcGraph. To add support for a new robot model, manufacturers will need to follow these steps:</p> <ol> <li>Create a new library based on the RoboConnect template library provided. This will serve as the foundation for integrating the new robot model with TcGraph.</li> <li>Create a factory for the new robot model by providing a unique model name for it. This will allow the RoboConnect library to differentiate between different robot models and their specific implementations.</li> <li>Create the base code for the new robot model by extending the RobotBaseClass. This class provides easy-to-use methods and properties that allow the manufacturer to interact with the front-end code of TcGraph.</li> <li>Register which functions the new robot model will support, such as RC_MoveJ. This will inform TcGraph which robot functions can be used with the new robot model. If a function is not registered, TcGraph will display a predefined error code of NOT_SUPPORTED, indicating that the robot does not support that function.</li> </ol> <p>By following these steps, manufacturers can easily integrate their new robot models with TcGraph using the RoboConnect library.</p>"},{"location":"manufacturer-adding-support-for-robot/#more-than-just-a-library","title":"More than just a library","text":"<p>RoboConnect is more than just a library for implementing robots and cobots in IEC61131-3 language PLCs. It also provides manufacturers with a range of helper functions and objects that cover some of their usual tasks. These functions and objects are designed to make it easier for manufacturers to integrate their robots with TcGraph and to provide a more seamless user experience. Some of the helper functions and objects provided include:</p>"},{"location":"manufacturer-adding-support-for-robot/#communication-objects","title":"Communication objects:","text":"<p>RoboConnect provides a range of communication objects that allow manufacturers to establish and maintain communications between their robots and library. These objects support a variety of communication protocols, such as Modbus TCP, EthernetIP, and Digital IO.</p>"},{"location":"manufacturer-adding-support-for-robot/#streaming-data-objects","title":"Streaming data objects:","text":"<p>RoboConnect also provides streaming data objects that allow manufacturers to stream real-time data from their robots to the end user. These objects handle the data transmission and provide a mechanism for users to visualize the data in real-time.</p>"},{"location":"manufacturer-adding-support-for-robot/#asynchronous-call-objects","title":"Asynchronous call objects:","text":"<p>To ensure that the user interface of RoboConnect remains responsive, RoboConnect provides asynchronous call objects that allow manufacturers to execute long-running operations without blocking the user code.</p>"},{"location":"manufacturer-adding-support-for-robot/#feedback-objects","title":"Feedback objects:","text":"<p>Finally, RoboConnect provides feedback objects that allow manufacturers to provide feedback to users about the status of their robots. These objects can be used to log information, report errors, or display values in real-time.</p> <p>By providing these helper functions and objects, RoboConnect makes it easier for manufacturers to integrate their robots with TcGraph and to provide a more seamless user experience. This allows users to focus on developing their applications without having to worry about the intricacies of robot integration.</p>"},{"location":"robo_connect-testing/","title":"Unit Testing","text":"<p>RoboConnect provides a suite of tests for concrete implmentation of RoboConnect. The suite of tests should be run on a fully implemented and live instance of RoboConnect. </p>"},{"location":"robo_connect-testing/#usage","title":"Usage","text":"<p>The tests cover each method and property of RoboConnect. To run the tests, they the testing suite needs to be run sequencially in the correct order. The state of the robot will be remembered for each test so it is important to reset any state of the robot between tests if it will break the following test. </p> <p>RoboConnects exisiting test library is parameterised to make it easy to extend and set test states of each of the tests. </p>"},{"location":"robo_connect-testing/#example","title":"Example","text":"<p>In the connection tests, the test will force the RoboConnect to disconnect after each test. This means the next sequencial test will be in the correct state to perform it's test. </p>"},{"location":"robo_connect_Command%20Queue/","title":"TCP Commands","text":"<p>If the robot uses TCP messages to control the robot then robo_connect has two command helper classes to manage the flow of messages to the robot. As a user sends commands to the robot the concrete implementation of RoboConnect will implement the command queue and command invoker to manage these. </p>"},{"location":"robo_connect_Command%20Queue/#command-queue","title":"Command Queue","text":"<p>The command queue holds the commands in a priority based FIFO queue.  </p> <p>From the the interface the command will be accepted. Inside the method a an I_Task is taken from the command queue and populated with the relavant command string. The command is then added to the command queue at a specific priority level. </p> <p>Priority levels are be set at the developers decision but it is recommended that saftey critical command are set at top priority. </p> <p>For example Movj for Dobot CR3 is set at normal priority and stop is set at high priority. </p> <p>These commands are then dequeued by the Command Invoker </p>"},{"location":"robo_connect_Command%20Queue/#command-invoker","title":"Command Invoker","text":"<p>The command invoker is responsible for taking the commands from the queue and processing them. To do this there is a state machine that will wait for new command in the queue then process the command. After the command is send it will look for another.</p> <pre><code>CASE state OF\n  IDLE:\n    IF _commandQueue.Count &gt; 0 THEN\n      state := GET_COMMAND;\n    END_IF\n\n  GET_COMMAND:\n    IF _commandQueue.GetNext(output_command =&gt; currentCmd) THEN\n      state := PROCESSING;\n    END_IF\n\n  PROCESSING:\n\n    IF StateChanged() THEN\n      currentCmd.Execute();\n    END_IF\n\n    IF currentCmd.Done THEN\n      state := IDLE;\n    END_IF\nEND_CASE\n</code></pre>"},{"location":"robo_connect_Command%20Strategy/","title":"Command Strategy","text":"<p>For TCP issued commands to robot RoboConnect uses the Strategy Patter to hold and execute the commands in order. The commands are string messages send to robot controllers. </p> <p>After the method has been called on RoboConnect the command will be set up a T_CommandTask to be executed in the command invoker. </p>"},{"location":"robo_connect_Command%20Strategy/#t_commandtask","title":"T_CommandTask","text":"<p>A command task is used for executing TCP messages to robot controllers. T_CommandTask implements I_Task so that it can be used in the rest of the system for feedback. </p> Method Desciption Initialise Initialise the current command with dependancies Cyclic Logic Runs the state machine for the command task Abort Abort the current command Execute Execute the command Busy Command is executing Done Command is finished executing Error Error when executing the comand"},{"location":"robo_connect_Command%20Strategy/#i-task","title":"I Task","text":"<p>I_Task is the base interface passed throughout RoboConnect to check if commands have been sent sucessfully. </p> Method Desciption Abort Abort the current command Execute Execute the command Busy Command is executing Done Command is finished executing Error Error when executing the comand"},{"location":"robo_connect_I_RoboConnect/","title":"I_RoboConnect","text":"<p>I_RoboConnect is the base interface for all RoboConnect concrete implementations. </p> <p>Below are a list of commands and properties a concrete RoboConnect implementation must contain. </p>"},{"location":"robo_connect_I_RoboConnect/#methods","title":"Methods","text":"Method / Function Block Description Enable Enable Robot Axes Disable Disable Robot Axes Reset Reset Axes / Clear Errors Halt Stop movement, no reset required Stop Stop movement, reset required MoveLinear Move Absolute Linear Cartesian MoveLinearAdvanced Move Absolute Linear Cartesian with Speed, Acceleration, Frame, Tool, Buffer, Type, Transition Type, and Transition Mode MoveJoint Move Absolute Joints with Speed and Acceleration MoveJointsAdvanced Move Absolute Joints with Speed &amp; Acceleration MoveJointsCartesian Move Joints in Cartesian Space MoveJointsCartesianAdvanced Move Joints in Cartesian with Speed, Acceleration, Frame, Tool, Buffer, Type, Transition Type, and Transition Mode JogCartesian Jog a Cartesian Axis JogJointAxis Jog a joint Axis Connect Establishes communication between the PLC and robot controller CyclicLogic Handles the statemachine of the robot. Disconnect Stops comunication between the PLC and robot controller"},{"location":"robo_connect_I_RoboConnect/#sets","title":"Sets","text":"Method / Function Block Description SetUserFrame Sets User Frame Co-ordinates SetToolFrame Sets Tool Frame Co-ordinates SetDigitalOutput Sets Digital IO SetToolDigitalOutput Sets Tool Digital IO SetAnalogOutput Sets Analog IO SetJogType Set Jog Type E.g. Joint, Cartesian SetBufferMode Set Buffer Mode SetTransitionMode Set Transition Mode SetTransitionParameter Set Transition Parameter SetToolAnalogOutput Sets Tool Analog IO SetJointAcceleration Sets Global Joint Acceleration SetCartesianAcceleration Sets Global Cartesian Acceleration SetJointSpeed Set Global Joint Speed SetCartesianSpeed Set Global Cartesian Speed"},{"location":"robo_connect_I_RoboConnect/#gets","title":"Gets","text":"Method / Function Block Description GetDigitalOutput Gets Digital IO GetToolDigitalOutput Get Tool Digital Output GetAnalogOutput Get Tool Digital Output GetToolAnalogOutput Get Tool Analog output GetAxisCurrents Returns the current drawn in each joint GetAxisTemperature Returns the temperature of each joint GetAxisPositions Retuns the current position of each joint"},{"location":"robo_connect_I_RoboConnect/#properties","title":"Properties","text":"Property Description Connected Status of comunication to robot controller Enabled Actuators Status Busy Robot Executing Command Done Robot Finished Command Error Command generated an error Error ID Generalised error ID Position Current TCP positon of end effector"},{"location":"robo_connect_TcpConnection/","title":"T_TcpConnection","text":"<p>T_TcpConnection is used as a class to help manage sending messages of tcp to a tobot controller. T_TcpConnection is composed of classes that use the TF6310 |TwinCAT 3 TCP/IP library.</p> Method Desciption Connect Connects to a tcp server with ip &amp; port Disconnect Disconnects from the Tcp server Send Sends a string message Recieve Recives from the tcp server IsConnected Returns true if a connection is established SendingDone Returns true if TcpSend is done"},{"location":"robo_connect_TcpConnection/#t_tcpclientconnect","title":"T_TcpClientConnect","text":"<p>T_TcpClinetConnect wraps Twincat FB_ClientServerConnection function block as a class. </p> Method Desciption Connect Sets FB_ClientServer execute to true Cyclic Logic Calls FB_ClientServer to maintain the connection Disconnect Sets FB_ClientServer execute to false Busy Returns true if FB_ClientServer connection is busy Error Returns true if FB_ClientServer connection is in error IsConnected Returns true if FB_ClientServer connection is connected Socket Returns the socket to be used in send and receive methods"},{"location":"robo_connect_TcpConnection/#t_tcpreceive","title":"T_TcpReceive","text":"<p>T_TcpReceive wraps twincat FB_SocketReceive in class. </p> Method Desciption Cyclic Logic Calls FB_ClientServer to maintain the connection Receive Returns the latest message Busy Returns true if FB_SockReceive connection is busy Error Returns true if FB_SockReceive connection is in error HasSocket Returns true if the socket has been set"},{"location":"robo_connect_TcpConnection/#t_tcpsend","title":"T_TcpSend","text":"<p>T_TcpReceive wraps twincat FB_SocketSend in class. </p> Method Desciption Cyclic Logic Calls FB_ClientServer to maintain the connection Send Sends a string message Busy Returns true if FB_SockReceive connection is busy Error Returns true if FB_SockReceive connection is in error HasSocket Returns true if the socket has been set"},{"location":"robo_connect_components/","title":"Components","text":""},{"location":"robo_connect_connect/","title":"Connect","text":"<p>Each robot has a feildbus open for plc control, TC-Robot uses that feildbus to control the robot. The following table details the feildbus each robot uses. </p> FeildBus Robot EtherCAT Staubli TCP/IP Dobot, Universal Robot E series"},{"location":"robo_connect_connect/#ethercat","title":"EtherCAT","text":"<p>The EtherCAT comunication uses the TwinCAT 3 Function TF5130. As this is a configuration change of the PLC enviroment similar to how IO would be configured the method is not implmented, however following these steps will cofigure robot within your project. </p>"},{"location":"robo_connect_connect/#tcpip","title":"TCP/IP","text":"<p>The TCP/IP comunication uses the TwinCAT 3 Function TF6310 installed onto the IPC connected to the robot. When calling the connect method a robot using TCP/IP the IP address of the robot should be passed into the method. </p> <p>This will establish the connection required for PLC control of the robot controller. Each robot has multiple ports for various types of commands, the calling of the connect method should establish all of the avaiable ports. For example to turn on a Dobot arm the string \"PowerOn()\" is required to be sent throught he port 29999.  For example to power a Dobot robotic arm the string \"PowerOn()\" should be sent on the dashboard port of 29999.</p>"},{"location":"robo_connect_library/","title":"RoboConnect Library","text":""},{"location":"robo_connect_library/#libraries","title":"Libraries","text":"Library Desciption RoboConnect Base library for all RoboConnects RoboConnect Dobot CR3 Concrete implementation for Dobot CR3 RoboConnect UR10e Concrete implementation for Universal Robots UR10e RoboConnect Staubli Rx160 Concrete implementation for Staubli Rx160"},{"location":"user-creating-your-robot/","title":"Creating your robot","text":""},{"location":"user-creating-your-robot/#setting-up-your-project","title":"Setting up your project","text":"<p>Adding a robot to your project could not be simpler. Just add the RoboConnect Library to your project, plus the RoboConnect manufacturer library which supports your robot type.</p>"},{"location":"user-creating-your-robot/#basic-usage-of-roboconnect","title":"Basic usage of RoboConnect","text":"<p>!&gt; RoboConnect.library will need to be added to your project</p> <p>In this example we will create, connect, move and disconnect from a MG-400 cobot. You will need to have added the RoboConnect.library, and RoboConnect_Dobot.library to your PLC project.</p>"},{"location":"user-creating-your-robot/#structured-text","title":"Structured Text","text":"<p>This example shows how to achieve this using Structured Text.</p> <pre><code>PROGRAM Main\nVAR\n  robot : I_Robot := RoboConnect.Create('dobot','mg400');\n  rcPower : RC_Power;\n  rcMoveJ : RC_MoveJ;\n  movePosition : ARRAY [0..5] OF LREAL := [0.601219, 0.202453, 0.146580, 0.000000, 2.902453, -1.202235];\n  state : (IDLE, CONNECTING, ENABLE,  MOVE, MOVING, DISABLE, DISCONNECT) := IDLE;\n\nEND_VAR\n</code></pre> <pre><code>\nCASE state OF\n\n  IDLE :\n\n    robot.Connect();\n    state := CONNECTING;\n\n  CONNECTING :\n    IF robot.IsConnected THEN\n      state := ENABLE;\n    END_IF\n\n  ENABLE :\n\n    rcPower(\n      Robot := robot,\n      Enable := TRUE\n    );\n\n    IF rcPower.Status THEN\n       state := MOVE;\n    END_IF\n\n  MOVE :\n\n    rcMoveJ(\n        Robot := robot,\n        Position := movePosition; // [0.601219, 0.202453, 0.146580, 0.000000, 2.902453, -1.202235];\n        Execute := TRUE;\n    );\n\n    state := MOVING;\n\n  MOVING :\n\n    rcMoveJ(\n        Robot := robot,\n        Execute := FALSE;\n    );\n\n    IF rcMoveJ.Done THEN\n      state := DISABLE;\n    END_IF\n\n\n  DISABLE:\n\n    rcPower(\n      Robot := robot,\n      Enable := FALSE\n    );\n\n  state := DISCONNECT;\n\n  DISCONNECT:\n\n    robot.Disconnect();\n\nEND_CASE;\n\nrobot.Update();\n</code></pre>"},{"location":"user-creating-your-robot/#fbd","title":"FBD","text":"<p>This example shows how to achieve this by using Function Block Diagram.</p>"},{"location":"user-creating-your-robot/#ladder","title":"Ladder","text":"<p>This example shows how to achieve this by using Ladder Logic.</p> <p>For more information on how to use RoboConnect, see the docs and the examples directory.</p>"},{"location":"user-rc-movej/","title":"RC_MoveJ","text":""},{"location":"user-rc-movej/#description","title":"Description","text":"<p>The RC_MoveJ function is a command used to move a robotic arm or cobot from its current position to a specified position along a predefined path using joint motion. It takes in two inputs: the robot object and an array of LREAL values representing the positions of each joint of the robot arm.</p> <p>The RC_MoveJ function specifies the positions and orientations of each joint of a robotic arm, allowing it to move from one point to another in a smooth and controlled manner. The LREAL array input represents the desired positions of each joint, and the robot object input represents the specific robot or cobot that will perform the motion.</p>"},{"location":"user-rc-movej/#example","title":"Example","text":""},{"location":"user-rc-movej/#structured-text","title":"Structured Text","text":"<p>This example shows how to achieve this using Structured Text.</p> <pre><code>PROGRAM Main\nVAR\n  robot : I_Robot := RoboConnect.Create('manufacturer','model');\n  movePosition : ARRAY [0..5] OF LREAL := [0.601219, 0.202453, 0.146580, 0.000000, 2.902453, -1.202235];\n  rcMoveJ : RC_MoveJ;\nEND_VAR\n</code></pre> <pre><code>rcMoveJ(\n    Robot := robot,\n    Execute := true,\n    Positions := movePosition;\n    Done =&gt; bDone,\n    Busy =&gt; bBusy,\n    Error =&gt; bError,\n    ErrorID =&gt; nErrorID\n);\n\nrobot.Update();\n</code></pre>"},{"location":"user-rc-movej/#fbd","title":"FBD","text":"<p>This example shows how to achieve this by using Function Block Diagram.</p>"},{"location":"user-rc-movej/#ladder","title":"Ladder","text":"<p>This example shows how to achieve this by using Ladder Logic.</p>"},{"location":"user-rc-movej/#inputs","title":"Inputs","text":"Type Description Robot I_Robot Interface to your robot Execute BOOL The command is executed with a positive edge. Position Array [*] OF LREAL Each position listed as an array of LREAL. Supplying less than the total number of joints will use the value of 0 for that joint."},{"location":"user-rc-movej/#outputs","title":"Outputs","text":"Type Description Done BOOL TRUE if the move was successfully completed. Busy BOOL TRUE as soon as the command is started with \"Execute\" and as long as the command is processed. If \"Busy\" is FALSE, the function block is ready for a new command. At the same time, one of the outputs \"Done\" or \"Error\" is set. Error BOOL TRUE, if an error occurs. ErrorID UDINT If the error output is set, this parameter supplies the error number."},{"location":"user-rc-power/","title":"RC_Power","text":""},{"location":"user-rc-power/#description","title":"Description","text":"<p>RC_Power activates software enable for a robot. At \"Status\" output operational readiness of the robot is indicated. A velocity override influences the velocity of all travel commands by a specified percentage. Depending on the drive type, \u201cStatus\u201d also signals operational readiness of the robot.</p>"},{"location":"user-rc-power/#example","title":"Example","text":""},{"location":"user-rc-power/#structured-text","title":"Structured Text","text":"<p>This example shows how to achieve this using Structured Text.</p> <pre><code>PROGRAM Main\nVAR\n  robot : I_Robot := RoboConnect.Create('manufacturer','model');\n  rcPower : RC_Power;\nEND_VAR\n</code></pre> <pre><code>rcPower(\n    Robot := robot,\n    Enable := true,\n    Override := 100.0,\n    Status =&gt; bStatus,\n    Busy =&gt; bBusy,\n    Active =&gt; bActive,\n    Error =&gt; bError,\n    ErrorID =&gt; nErrorID\n);\n\nrobot.Update();\n</code></pre>"},{"location":"user-rc-power/#fbd","title":"FBD","text":"<p>This example shows how to achieve this by using Function Block Diagram.</p>"},{"location":"user-rc-power/#ladder","title":"Ladder","text":"<p>This example shows how to achieve this by using Ladder Logic.</p>"},{"location":"user-rc-power/#inputs","title":"Inputs","text":"Type Description Robot I_Robot Interface to your robot Enable BOOL General software enable for the robot. Override LREAL Velocity override in % for all motion commands. (0 \u2264 Override \u2264 100.0)"},{"location":"user-rc-power/#outputs","title":"Outputs","text":"Type Description Status BOOL TRUE when the robot is ready for operation. Busy BOOL TRUE as soon as the command is started with \"Execute\" and as long as the command is processed. If \"Busy\" is FALSE, the function block is ready for a new command. At the same time, one of the outputs \"Done\" or \"Error\" is set. Active BOOL Indicates that the command is executed. Error BOOL TRUE, if an error occurs. ErrorID UDINT If the error output is set, this parameter supplies the error number."},{"location":"user-rc-reset/","title":"RC_Power","text":""},{"location":"user-rc-reset/#description","title":"Description","text":"<p>RC_Reset resets the robot. In many cases this also leads to a reset of a connected robot controller. Depending on the bus system or robot types, in some cases a separate reset may be required for the robot controller.</p>"},{"location":"user-rc-reset/#example","title":"Example","text":""},{"location":"user-rc-reset/#structured-text","title":"Structured Text","text":"<p>This example shows how to achieve this using Structured Text.</p> <pre><code>PROGRAM Main\nVAR\n  robot : I_Robot := RoboConnect.Create('manufacturer','model');\n  rcReset : RC_Reset;\nEND_VAR\n</code></pre> <pre><code>rcReset(\n    Robot := robot,\n    Execute := true,\n    Done =&gt; bDone,\n    Busy =&gt; bBusy,\n    Error =&gt; bError,\n    ErrorID =&gt; nErrorID\n);\n\nrobot.Update();\n</code></pre>"},{"location":"user-rc-reset/#fbd","title":"FBD","text":"<p>This example shows how to achieve this by using Function Block Diagram.</p>"},{"location":"user-rc-reset/#ladder","title":"Ladder","text":"<p>This example shows how to achieve this by using Ladder Logic.</p>"},{"location":"user-rc-reset/#inputs","title":"Inputs","text":"Type Description Robot I_Robot Interface to your robot Execute BOOL The command is executed with a positive edge."},{"location":"user-rc-reset/#outputs","title":"Outputs","text":"Type Description Done BOOL TRUE if the reset was successfully executed. Busy BOOL TRUE as soon as the command is started with \"Execute\" and as long as the command is processed. If \"Busy\" is FALSE, the function block is ready for a new command. At the same time, one of the outputs \"Done\" or \"Error\" is set. Error BOOL TRUE, if an error occurs. ErrorID UDINT If the error output is set, this parameter supplies the error number."},{"location":"Dobot/dobot_command_list/","title":"Command List","text":"<p>The TCP/IP control is based on strings, these are held in an enum. When the developer wants to use one of these commands they reference the enumeration. </p> <p>The command list below is not currently accurate - the RoboConnect.Dobot library is the source of truth.</p>"},{"location":"Dobot/dobot_command_list/#control-commands","title":"Control Commands","text":""},{"location":"Dobot/dobot_command_list/#poweron","title":"PowerOn","text":"<p>Powering on the robot. </p> <p><code>PowerOn()</code></p>"},{"location":"Dobot/dobot_command_list/#enable","title":"Enable","text":"<p>Enabling the robot with this command as an extension the command can incude the weight of the load and or the TCP off set. There are 3 different enable commands to call dependent on the optional parameters.</p> <p><code>EnableRobot(Load, centerX, center Y, center Z)</code></p> Parameter Type Description Load REAL Load weight.The value range should not exceed the load range of corresponding robot models, unit: kg. center X REAL Eccentric distance in X-axis direction. Range: -500 \u2013 500, unit: mm. center Y REAL Eccentric distance in Y-axis direction. Range: -500 \u2013 500, unit: mm. center Z REAL Eccentric distance in Z-axis direction. Range: -500 \u2013 500, unit: mm."},{"location":"Dobot/dobot_command_list/#disable","title":"Disable","text":"<p>Disabling the robot with this command preventing movement.</p> <p><code>DisableRobot()</code></p>"},{"location":"Dobot/dobot_command_list/#clearerror","title":"ClearError","text":"<p>Clears the alarm of the robot. After clearing the alarm, you can judge if the robot is still int he alarm status according to the RobotMode. Some alarms cannot be cleared unless you resolve the alarm cause or restart the controller. </p> <p><code>ClearError()</code></p>"},{"location":"Dobot/dobot_command_list/#reset","title":"Reset","text":"<p>Stops the robot and clears the robot's command queue. </p> <p><code>ResetRobot()</code></p>"},{"location":"Dobot/dobot_command_list/#runscript","title":"RunScript","text":"<p>Run a script that is loaded on the robot controller. </p> <p><code>RunScript(projectName)</code></p> Parameter Type Description projectName string Project Name"},{"location":"Dobot/dobot_command_list/#stopscript","title":"StopScript","text":"<p>Stop the running project. </p> <p><code>StopScript()</code></p>"},{"location":"Dobot/dobot_command_list/#pausescript","title":"PauseScript","text":"<p>Pause the running project. </p> <p><code>PauseScript()</code></p>"},{"location":"Dobot/dobot_command_list/#continuescript","title":"ContinueScript","text":"<p>Continue running the paused project. </p> <p><code>ContinueScript()</code></p>"},{"location":"Dobot/dobot_command_list/#halt","title":"Halt","text":"<p>Pause the motion commands that are currenlty active. </p> <p><code>Pause()</code></p>"},{"location":"Dobot/dobot_command_list/#continue","title":"Continue","text":"<p>Corresponding to the Pause command, continue will run the motion command paused by the Pause command.</p> <p><code>Continue()</code></p>"},{"location":"Dobot/dobot_command_list/#stop","title":"Stop","text":"<p>Stop the robot arm in an emergency. After the emergency stop, the robot arm will power off and alarm. The alarm needs to be cleared before is can be powered on and enabled again. When the software triggers the emergency stop status, delivering the <code>PowerOn()</code> command can directly reset and power on the robot arm. </p> <p><code>EmergencyStop()</code></p>"},{"location":"Dobot/dobot_command_list/#brakecontrol","title":"BrakeControl","text":"<p>Control the brake of the joint specified. The joints automatically brake when the robot is stationary. If you need to move the joint, you can switch on the brake, i.e. hold the joint manually in the disabled status and deliver the command to switch of the brake. </p> <p><code>BrakeControl(axisID,value)</code></p>"},{"location":"Dobot/dobot_command_list/#settings-commands","title":"Settings Commands","text":""},{"location":"Dobot/dobot_command_list/#setuserframe","title":"SetUserFrame","text":"<p>Sets a custom coordinate system to the base of the robot. The dobot allows for up to 10 user cordinate frames. </p> <p><code>SetUser(Index,table)</code></p> Parameter Type Description Index INT Index of the user coordinate system, range: [0,9]. The initial value of coordinate system 0 is the base coordinate system. Table STRING User coordinate system after modification, format: {x, y, z, rx, ry, rz}), which is recommended to obtain through CalcUser command."},{"location":"Dobot/dobot_command_list/#settoolframe","title":"SetToolFrame","text":"<p>Sets a custom coordinate system to the end effector of the robot. The dobot allows for up to 10 tool cordinate frames. </p> <p><code>SetTool(Index,table)</code></p> Parameter Type Description Index INT Index of the tool coordinate system, range: [0,9]. The initial value of coordinate system 0 is the base coordinate system. Table STRING User coordinate system after modification, format: {x, y, z, rx, ry, rz}), which is recommended to obtain through CalcUser command."},{"location":"Dobot/dobot_command_list/#setjointacceleration","title":"SetJointAcceleration","text":"<p>Set acceleration ratio of joint motion. The default value is 50 when this command is not called, and the value set by this command will continue to be maintained after exiting TCP mode.</p> <p><code>AccJ(R)</code></p> Parameter Type Description R INT Acceleration ratio, range [1,100]"},{"location":"Dobot/dobot_command_list/#setcartesianacceleration","title":"SetCartesianAcceleration","text":"<p>Set acceleration ratio of linear and arc motion. The default value is 50 when this command is not called, and the value set by this command will continue to be maintained after exiting TCP mode.</p> <p><code>AccL(R)</code></p> Parameter Type Description R INT Acceleration ratio, range [1,100]"},{"location":"Dobot/dobot_command_list/#setjointspeed","title":"SetJointSpeed","text":"<p>Set the speed ratio of the joint motion. The default value is 50 when this command is not called, and the value set by this command will continue to be maintained after exiting TCP mode. </p> <p><code>SpeedJ(R)</code> |Parameter|Type|Description| |-|-|-| |R|INT|Speed ratio, range [1,100]|</p>"},{"location":"Dobot/dobot_command_list/#setcartesianspeed","title":"SetCartesianSpeed","text":"<p>Set the speed ratio of the joint motion. The default value is 50 when this command is not called, and the value set by this command will continue to be maintained after exiting TCP mode. </p> <p><code>SpeedL(R)</code> |Parameter|Type|Description| |-|-|-| |R|INT|Speed ratio, range [1,100]|</p>"},{"location":"Dobot/dobot_command_list/#calculating-and-obtaining-commands","title":"Calculating and Obtaining Commands","text":""},{"location":"Dobot/dobot_command_list/#io-commands","title":"IO Commands","text":""},{"location":"Dobot/dobot_command_list/#getdigitaloutput","title":"GetDigitalOutput","text":"<p>This can be read through the feedback port.</p>"},{"location":"Dobot/dobot_command_list/#setdigitaloutput","title":"SetDigitalOutput","text":"<p>Set the status of the digital output port on the controller</p> <p><code>DO(index,status)</code></p> Parameter Type Description index INT DO index status INT DO status: 1 signal, 0 no signal"},{"location":"Dobot/dobot_command_list/#gettooldigitaloutput","title":"GetToolDigitalOutput","text":"<p>This can be read through the feedback port.</p>"},{"location":"Dobot/dobot_command_list/#settooldigitaloutput","title":"SetToolDigitalOutput","text":"<p>Set the status of the digital output port on the end effector of the robot. </p> <p><code>ToolDI(index,status)</code></p> Parameter Type Description index INT DO index status INT DO status: 1 signal, 0 no signal"},{"location":"Dobot/dobot_command_list/#getanalogoutput","title":"GetAnalogOutput","text":"<p>This can be read through the feedback port.</p>"},{"location":"Dobot/dobot_command_list/#setanalogoutput","title":"SetAnalogOutput","text":"<p>Set the value of analog output port. </p> <p><code>AO(index,value)</code></p> Parameter Type Description index INT AO index value REAL AO output"},{"location":"Dobot/dobot_command_list/#gettoolanalogoutput","title":"GetToolAnalogOutput","text":"<p>This can be read through the feedback port. </p>"},{"location":"Dobot/dobot_command_list/#settoolanalogoutput","title":"SetToolAnalogOutput","text":"<p>There is no tool analog output on a dobot. </p>"},{"location":"Dobot/dobot_command_list/#motion-commands","title":"Motion Commands","text":""},{"location":"Dobot/dobot_command_list/#movelinear","title":"MoveLinear","text":"<p>Move tool centre point from the current position to the target Cartesian position through a linear motion. This type of movement will describe a straight line through space from current to target point. </p> <p><code>MovL(X,Y,Z,Rx,Ry,Rz)</code></p> Parameter Type Description X REAL X-axis position of the target point, unit: mm Y REAL Y-axis position of the target point, unit: mm Z REAL Z-axis position of the target point, unit: mm rX REAL Rx-axis position of the target point, unit: \u00b0 rY REAL Ry-axis position of the target point, unit: \u00b0 rZ REAL Rz-axis position of the target point, unit: \u00b0"},{"location":"Dobot/dobot_command_list/#movelinearadvanced","title":"MoveLinearAdvanced","text":"<p>This has the same functionailty as MoveL however has the optional parameters of user Cordinate frame, tool cordinate frame, speed ratio &amp; acceleration ratio. </p> <p><code>MovL(X,Y,Z,Rx,Ry,Rz,User=index,Tool=index,SpeedL=R,AccL=R)</code></p> Parameter Type Description X REAL X-axis position of the target point, unit: mm Y REAL Y-axis position of the target point, unit: mm Z REAL Z-axis position of the target point, unit: mm rX REAL Rx-axis position of the target point, unit: \u00b0 rY REAL Ry-axis position of the target point, unit: \u00b0 rZ REAL Rz-axis position of the target point, unit: \u00b0 user INT Index of the user coordinate system, range :[0,9]. The initial value of coordinate system 0 is the base coordinate system. Tool INT Index of the Tool coordinate system, range :[0,9]. The initial value of coordinate system 0 is the base coordinate system. speedL INT Speed ratio: [1-100] accL INT Acceleration ratio: [1-100]"},{"location":"Dobot/dobot_command_list/#movejoint","title":"MoveJoint","text":"<p>Allows the robot to move between points without specifying a path for the end effector. Instead the robot moves each joint to the target position. </p> <p><code>JointMovJ(J1,J2,J3,J4,J5,J6)</code></p> Parameter Type Description J1 REAL J1-axis position of the target point, unit: \u00b0 J2 REAL J2-axis position of the target point, unit: \u00b0 J3 REAL J3-axis position of the target point, unit: \u00b0 J4 REAL J4-axis position of the target point, unit: \u00b0 J5 REAL J5-axis position of the target point, unit: \u00b0 J6 REAL J6-axis position of the target point, unit: \u00b0"},{"location":"Dobot/dobot_command_list/#movejointadvanced","title":"MoveJointAdvanced","text":"<p>This has the same functionailty as JointMoveJ however has the optional parameters of speed ratio &amp; acceleration ratio.</p> <p><code>JointMovJ(J1,J2,J3,J4,J5,J6,SpeedJ=R,AccJ=R)</code></p> Parameter Type Description J1 REAL J1-axis position of the target point, unit: \u00b0 J2 REAL J2-axis position of the target point, unit: \u00b0 J3 REAL J3-axis position of the target point, unit: \u00b0 J4 REAL J4-axis position of the target point, unit: \u00b0 J5 REAL J5-axis position of the target point, unit: \u00b0 J6 REAL J6-axis position of the target point, unit: \u00b0 speedJ INT Speed ratio: [1-100] accJ INT Acceleration ratio: [1-100]"},{"location":"Dobot/dobot_command_list/#movejointscartesian","title":"MoveJointsCartesian","text":"<p>Move from the current posistion to the target cartesian position with a focus on joint positional change. For joint motion, the trajectory is not linear, and all joints complete the movement simultaneously. </p> <p><code>MovJ(X,Y,Z,Rx,Ry,Rz)</code></p> Parameter Type Description X REAL X-axis position of the target point, unit: mm Y REAL Y-axis position of the target point, unit: mm Z REAL Z-axis position of the target point, unit: mm rX REAL Rx-axis position of the target point, unit: \u00b0 rY REAL Ry-axis position of the target point, unit: \u00b0 rZ REAL Rz-axis position of the target point, unit: \u00b0"},{"location":"Dobot/dobot_command_list/#movejointscartesianadvanced","title":"MoveJointsCartesianAdvanced","text":"<p>This has the same functionailty as MoveJointsCartesian however has the optional parameters of speed ratio &amp; acceleration ratio.</p> <p><code>MovJ(X,Y,Z,Rx,Ry,Rz,User=index,Tool=index,SpeedJ=R,AccJ=R)</code></p> Parameter Type Description X REAL X-axis position of the target point, unit: mm Y REAL Y-axis position of the target point, unit: mm Z REAL Z-axis position of the target point, unit: mm rX REAL Rx-axis position of the target point, unit: \u00b0 rY REAL Ry-axis position of the target point, unit: \u00b0 rZ REAL Rz-axis position of the target point, unit: \u00b0 speedJ INT Speed ratio: [1-100] accJ INT Acceleration ratio: [1-100]"},{"location":"Dobot/dobot_command_list/#movecircularcartesian","title":"MoveCircularCartesian","text":"<p>This move will generate a circular tool center point path from current position and two provided points in cartesian space. The robot will then follow this path to the specified count. </p> <p><code>Circle3({X1,Y1,Z1,Rx1,Ry1,Rz1},{X2,Y2,Z2,Rx2,Ry2,Rz2},count)</code></p> Parameter Type Description X1 REAL X-axis position of P1, unit: mm Y1 REAL Y-axis position of P1, unit: mm Z1 REAL Z-axis position of P1, unit: mm Rx1 REAL Rx-axis position of P1, unit: \u00b0 Ry1 REAL Ry-axis position of P1, unit: \u00b0 Rz1 REAL Rz-axis position of P1, unit: \u00b0 X2 REAL X-axis position of P2, unit: mm Y2 REAL Y-axis position of P2, unit: mm Z2 REAL Z-axis position of P2, unit: mm Rx2 REAL Rx-axis position of P2, unit: \u00b0 Ry2 REAL Ry-axis position of P2, unit: \u00b0 Rz2 REAL Rz-axis position of P2, unit: \u00b0 Count INT Circles of motion, range: 1 \u2013 999."},{"location":"Dobot/dobot_command_list/#movecircularcartesianadvanced","title":"MoveCircularCartesianAdvanced","text":"<p>This has the same functionailty as MoveCircularCartesian however has the optional parameters of speed ratio &amp; acceleration ratio.</p> <p><code>Circle3({X1,Y1,Z1,Rx1,Ry1,Rz1},{X2,Y2,Z2,Rx2,Ry2,Rz2},count,User=index,Tool=index)</code></p> Parameter Type Description X1 REAL X-axis position of P1, unit: mm Y1 REAL Y-axis position of P1, unit: mm Z1 REAL Z-axis position of P1, unit: mm Rx1 REAL Rx-axis position of P1, unit: \u00b0 Ry1 REAL Ry-axis position of P1, unit: \u00b0 Rz1 REAL Rz-axis position of P1, unit: \u00b0 X2 REAL X-axis position of P2, unit: mm Y2 REAL Y-axis position of P2, unit: mm Z2 REAL Z-axis position of P2, unit: mm Rx2 REAL Rx-axis position of P2, unit: \u00b0 Ry2 REAL Ry-axis position of P2, unit: \u00b0 Rz2 REAL Rz-axis position of P2, unit: \u00b0 Count INT Circles of motion, range: 1 \u2013 999. user INT Index of the user coordinate system, range :[0,9]. The initial value of coordinate system 0 is the base coordinate system. Tool INT Index of the Tool coordinate system, range :[0,9]. The initial value of coordinate system 0 is the base coordinate system."},{"location":"Dobot/dobot_command_list/#jog","title":"Jog","text":"<p>Jog the robot arm. After the command is delivered, the robot arm will continuously jog along the specified axis, and it will stop once MoveJog() is delivered. In addition, when the robot arm is jogging, the delivery of MoveJog(string) with any non-specified string will also stop the motion of the robot arm. This command is supported by controller V3.5.2 and above.</p> <p><code>MoveJog(axisID)</code></p> Parameter Type Description AxisID STRING The target axis or axes followed by the direction negative (-) or positive (+). Possible cobinations are J1+, J1-, J2+, J2-, J3+, J3-, J4+, J4-, J5+, J5-, J6+, J6-, X+, X-, Y+, Y-, Z+, Z-, Rx+, Rx-, Ry+, Ry-, Rz+, Rz- Leave empty to stop jog"},{"location":"Dobot/dobot_command_list/#setjogtype","title":"SetJogType","text":"<p>Movejog has an option to set the target coordinate, I have added an advance moveJog </p>"},{"location":"Dobot/dobot_robo_connect_Objects/","title":"RoboConnect Objects","text":"<p>This details the proccess of combining giving methods to the objects detailed in RoboConnect. They key object to this is the command constructor. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#methods","title":"Methods","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#connect","title":"Connect","text":"<p>  This method moves the state in the CyclicLogic method from \"INIT\" TO \"CONNECTING\" which establishes the TCPIP ports. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#cycliclogic","title":"CyclicLogic","text":"<p>  This method is called every cycle and contains a case statement. This case has six states:</p> <ol> <li>INIT</li> <li>IDLE</li> <li>CONNECTING</li> <li>READY</li> <li>DISCONNECTING</li> <li>ERROR_STATE</li> </ol>"},{"location":"Dobot/dobot_robo_connect_Objects/#init","title":"INIT","text":"<p>This state upon the first cycle will move to IDLE. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#idle","title":"IDLE","text":"<p>Waiting for the connect method however until this is called the case will remain in this state. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#connecting","title":"CONNECTING","text":"<p>On line 18 there is a check if the the state has changed if this is true the three TCPIP ports are set to connect. The time out of the connection is set globally and defaults at 45 seconds (In testing a 5 second time out meant that the connection never suceeded). Before moving onto the next case the connection needs to be tested. Each of the ports is of type T_ConnectionTCPIP which has a property of IsConnected this is inspected on line 28. Moving onto the ready state can only happen when all three ports are connected.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#ready","title":"READY","text":"<p>This is the running state the robot is ready to receive commands and the feedback is read. That is what line 34 does, this is a call that receives in the 1440 bytes of feedback from the realtime feedback port. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#disconnecting","title":"DISCONNECTING","text":"<p>The if statement on line 37 checks for a change of state then if that returns true each of the ports established in CONNECTING are called to disconnect. Line 43 checks if each of the connections are disconnected before moving to IDLe ready for a connect method call against the robot. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#error_state","title":"Error_state","text":"<p>This state isn't used.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#cyclicreadfeedback","title":"CyclicReadFeedback","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#disable","title":"Disable","text":"<p> The statement in the if statement populates the variable \"commandString\" with the string to disable the robot \"DisableRobot()\". The method returns true if it is successful so if it fails the method T_DobotCR3.Disable returns false as the command wasn't successful. Line 5 retreves a task from the task pool and assigns it to the variable \"ThisTask\". Line 9 populates the task with the target port for the command and the command string payload. line 10 adds the task to the command queue with a normal priority as this is a standard command. Then the method is set to true.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#disconnect","title":"Disconnect","text":"<p> This method moves the state in the CyclicLogic method from \"READY\" TO \"DISCONNECTING\" which disconnects the TCPIP ports. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#enable","title":"Enable","text":"<p> Using the commandConstructor populate the command string with the correct TCPIP string to enable the robot \"EnableRobot()\". Then gets the next available task from the task list. Line 10 inialises the task with the correct tcpip port and string.Line 11 adds the task to the command queue with normal priority. Line 12 sets the method to true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#halt","title":"Halt","text":"<p> There is no halt command in the Dobot command however the pause() command best meets what halt would do. \"Pause the motion commands that are not delivered by project (generally, the motion commands delivered by TCP), without clearing the motion queue.\". Taken from the Dobot_TCP_IP documentation. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#jogcartesian","title":"JogCartesian","text":"<p> JogCartesian takes in two inputs \"AxisIndex\" which is an interger value and \"AxisDirection\" which is a boolean True for positive movement then false for negative movement. You can use the DUT targetJogAxis to input the integer or just the raw int. </p> <p> </p> <p>This method checks against the CartesianDynamics of the robot which holds what cartesian axes a robot can move along. This prevents a robot that doesn't have 6 degrees of freedom from being jogged in an axis that isn't possible. </p> <p>Line 34 assembles the command string using the command constructor if this is unsuccessful then the method returns false.  Line 39 get's the next task from the task pool if GetTask returns false then JogCartesian is false and the method returns.  Line 44 packs the task with the port the command should go to for this instance it is the motion port as defined in the Dobot documentation.  Line 45 Adds the task to the normal priority queue.  Line 46 returns the method as true.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#jogjointaxis","title":"JogJointAxis","text":"<p> Similar to the JogCartesian method however this is focused on jogging a specific joint, on initalisation the number of Axis is defined. The method takes two inputs \"AxisIndex\" the target axis number if you want to stop jogging the input is 0. Then the second input is \"AxisDirection\" that is a boolean true is a positive movement and false is a negative direction of movement.  Line 1 if statement checks that the AxisIndex is within bounds of the robot's axes.  Line 2 assembles the command string using the command constructor if this is unsuccessful then the method returns false.  Line 6 get's the next task from the task pool if GetTask returns false then JogCartesian is false and the method returns.  Line 10 packs the task with the port the command should go to for this instance it is the motion port as defined in the Dobot documentation.  Line 11 Adds the task to the normal priority queue.  Line 12 returns the method as true.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#moveabs","title":"MoveABS","text":"<p> An input of a cartesian point detailing the target point in space for the robot to move toward.   Line 1 uses commandConstructor to assemble the command string from \"point\".  Line 12 get's the next task from the task pool if GetTask returns false then moveABS is false and the method returns.  Line 16 packs the task with the port the command should go to for this instance it is the motion port as defined in the Dobot documentation.  Line 17 Adds the task to the normal priority queue.  Line 18 returns the method as true.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#movej","title":"MoveJ","text":"<p> MoveJ takes an input of an array of lreal representing the target joint angles for the robot.  Line 1 uses commandConstructor to assemble the command string from \"joints\".  Line 12 get's the next task from the task pool if GetTask returns false then Movej is false and the method returns.  Line 16 packs the task with the port the command should go to for this instance it is the motion port as defined in the Dobot documentation.  Line 17 Adds the task to the normal priority queue.  Line 18 returns the method as true.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#reset","title":"Reset","text":"<p> Line 1 uses commandConstructor to assemble the command string.  Line 5 get's the next task from the task pool if GetTask returns false then Reset is false and the method returns.  Line 9 packs the task with the port the command should go to for this instance it is the dashboard port as defined in the Dobot documentation.  Line 10 Adds the task to the normal priority queue.  Line 11 returns the method as true.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#statechanged","title":"StateChanged","text":"<p> StateChanged uses two states initalised in the CR3 function block specically \"Sate\" &amp; \"prevState\" checking if the states changed. The method goes true and the prevState becomes the state. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#stop","title":"Stop","text":"<p> Line 1 uses commandConstructor to assemble the command string.  Line 5 get's the next task from the task pool if GetTask returns false then Reset is false and the method returns.  Line 9 packs the task with the port the command should go to for this instance it is the dashboard port as defined in the Dobot documentation.  Line 10 Adds the task to the high priority queue.  Line 11 returns the method as true.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#properties","title":"Properties","text":"<p>The majority of the properties are read through realtimefeedback port detailed in the Dobot TCP/IP Remote Control Interface Guide. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#busy","title":"Busy","text":"<p>Busy is a boolean.   The running status flag is asigned to the value of the busy property.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#connected","title":"Connected","text":"<p>Connected is a boolean.   Connected reads the is connected properties on the three TCP/IP ports if they are all true then all three of the ports are connected then the robot is connected. However if one of these ports are not connected the robot is classified as not connected. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#done","title":"Done","text":"<p>Done is a boolean.   In the TCP/IP documents there is no done command however if the robot isn't running then it is done. So for done is the inverse of the runningstatus. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#enabled","title":"Enabled","text":"<p>Enabled is a boolean.   There is an enabled status on the feedback port for the robot, this is the value given to the enabled property. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#error","title":"Error","text":"<p>Error is a boolean.   There is an error flag on the feedback port so that is the value given to the Error property. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#errorid","title":"ErrorID","text":"<p>ErrorID is a lreal.  There is an error code that is provided as an echo to a command string however currently not fed back to this property. </p> Error Code Description Note 0 No error Deliver successfully -1 Failed to get Failed to receive or execute -10000 Command Error The command does not exist -20000 Parameter number error The number of parameters in the command is incorrect. -30001 The type of the first parameter is incorrect. -30000 indicates that the parameter type is incorrect. The last bit 1 indicates that the type of the first parameter is incorrect -40001 The range of the first parameter is incorrect -40000 indicates the parameter range is incorrect. The last bit 1 indicates that the range of the first parameter is in correct."},{"location":"Dobot/dobot_robo_connect_Objects/#position","title":"Position","text":"<p>Position is type ST_CartesianPoint.  QActual represents the actual joint position of the robot </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#toolposition","title":"ToolPosition","text":"<p>ToolPosition is type ST_CartesianPoint.  ToolVectorActual represents the Tool Center Point (TCP) actual Cartesian coordinates. The method aligns the raw array of values to indexable cartesian axes. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#gets","title":"Gets","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#getanalogoutput","title":"GetAnalogOutput","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#getaxiscurrents","title":"GetAxisCurrents","text":"<p> \"Values\" is a unkown length of the array as this allows for various robots with a wide spectrum of joints. This method access the Iactual values from the realtime feedback port, the for loop indexes through the array and populates the \"Values\" array with currents of the joints.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#getaxispositions","title":"GetAxisPositions","text":"<p> \"Values\" is a unkown length of the array as this allows for various robots with a wide spectrum of joints. This method access the QActual values from the realtime feedback port, the for loop indexes through the array and poplates the \"Values\" array with the joint positional values. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#getaxistemperatures","title":"GetAxisTemperatures","text":"<p> \"Values\" is a unkown length of the array as this allows for various robots with a wide spectrum of joints. This method access the MotorTemperatures values from the realtime feedback port, the for loop indexes through the array and poplates the \"Values\" array with the temperature of the axis.</p>"},{"location":"Dobot/dobot_robo_connect_Objects/#getdigitaloutput","title":"GetDigitalOutput","text":"<p> Using the \"index\" which response to the target digital output for return. The target value is given value thorugh the realTimeFeedback port and the variable DigitalOutput with the index. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#gettoolanalogoutput","title":"GetToolAnalogOutput","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#gettooldigitaloutput","title":"GetToolDigitalOutput","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#sets","title":"Sets","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#setanalogoutput","title":"SetAnalogOutput","text":"Input Variable Data Type Representative value Index UINT Target output terminal Value LREAL Value of target output terminal <p>The if statement on line 1 populates the commandOutput with the correct string using the commandConstructor.  Line 5 populates the task with a task that is available from the task pool.  Line 9 initalises the task with the dashboard port and the command string.  Line 10 adds the task with normal priority to the command Queue.  Line 11 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setbuffermode","title":"SetBufferMode","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#setcartesianacceleration","title":"SetCartesianAcceleration","text":"Input Variable Data Type Representative value Acceleration LREAL The acceleration ratio with the range 1 to 100 <p>Line 1 populates the command string with the correct string for setting the cartesian acceleration. Due to the interface specificying an LREAL there is a type conversion between LREAL to INT.  Line 5 populates the task with a task that is available from the task pool.  Line 9 initalises the task with the dashboard port and the command string.  Line 10 adds the task with normal priority to the command Queue.  Line 11 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setcartesiandynamics","title":"SetCartesianDynamics","text":"<p>This method is part of the robot set up, it defines how the robot can move in cartesian space. It can restrict the jog movement by setting one of the dynamics to false. </p> Input Variable Data Type Representative value XDynamics BOOL If the robot can move in the X axis YDynamics BOOL If the robot can move in the Y axis ZDynamics BOOL If the robot can move in the Z axis ADynamics BOOL If the robot can move in the A axis BDynamics BOOL If the robot can move in the B axis CDynamics BOOL If the robot can move in the C axis <p></p> <p>Line 1 creates a copy of how the cartesian dynamics was before the dynamics are set. This is used to check if dynamics have been set from the default  Lines 2 to 37 inspects each variable input and sets the dynamics of the robot, if a dynamics is true then the cartesian point is set to 1 and visa versa.  Lines 38 to 46 uses the \"orginalCartesianDynamics\" to check if they match then the do then robot isn't inisalised as the robot can't move on any axis.  If the condition of the line 38 is true, sets the method to be true and marks that the CartesianDynamicsInitalisation to true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setcartesianspeed","title":"SetCartesianSpeed","text":"Input Variable Data Type Representative value Speed LREAL The speed ratio with the range 1 to 100 <p> Line 1 populates the command string with the correct string for setting the cartesian speed. Due to the interface specificying an LREAL there is a type conversion between LREAL to INT.  Line 5 populates the task with a task that is available from the task pool.  Line 9 initalises the task with the dashboard port and the command string.  Line 10 adds the task with normal priority to the command Queue.  Line 11 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setconnectionproperties","title":"SetConnectionProperties","text":"Input Variable Data Type Representative value IP T_MaxString The ip address of the robotic controller. <p> Sets the Ip address of the robot within the object, this \"_IP\" and it is used in the \"connect\" method. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setdigitaloutput","title":"SetDigitalOutput","text":"Input Variable Data Type Representative value Index UINT Target output terminal Value BOOL Value of target output terminal <p>The if statement on line 1 populates the commandOutput with the correct string using the commandConstructor.  Line 5 populates the task with a task that is available from the task pool.  Line 9 initalises the task with the dashboard port and the command string.  Line 10 adds the task with normal priority to the command Queue.  Line 11 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setjogtype","title":"SetJogType","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#setjointacceleration","title":"SetJointAcceleration","text":"Input Variable Data Type Representative value Acceleration LREAL The acceleration ratio with the range 1 to 100 <p>Line 1 populates the command string with the correct string for setting the joint acceleration. Due to the interface specificying an LREAL there is a type conversion between LREAL to INT.  Line 5 populates the task with a task that is available from the task pool.  Line 9 initalises the task with the dashboard port and the command string.  Line 10 adds the task with normal priority to the command Queue.  Line 11 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setjointspeed","title":"SetJointSpeed","text":"Input Variable Data Type Representative value Acceleration LREAL The acceleration ratio with the range 1 to 100 <p> Line 1 populates the command string with the correct string for setting the joint speed. Due to the interface specificying an LREAL there is a type conversion between LREAL to INT.  Line 5 populates the task with a task that is available from the task pool.  Line 9 initalises the task with the dashboard port and the command string.  Line 10 adds the task with normal priority to the command Queue.  Line 11 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setnumberofaxis","title":"SetNumberOfAxis","text":"Input Variable Data Type Representative value NumberOfAxisOfMovement UDINT Number of axis of movement that the robotic system has. <p>This method checks if the robot is initalised, if the robot is not initalised then this method sets the number of axes on the robot. This method also sets the \"NumberOfAxisInitalisation\" to true. Then sets the method to true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#settoolanalogoutput","title":"SetToolAnalogOutput","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#settooldigitaloutput","title":"SetToolDigitalOutput","text":"Input Variable Data Type Representative value Index UINT Target output terminal Value BOOL Value of target output terminal <p>The if statement on line 1 populates the commandOutput with the correct string using the commandConstructor. Due to the interface specificying an BOOL for value there is a type conversion between BOOL to INT.   Line 5 populates the task with a task that is available from the task pool.  Line 9 initalises the task with the dashboard port and the command string.  Line 10 adds the task with normal priority to the command Queue.  Line 11 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#settoolframe","title":"SetToolFrame","text":"Input Variable Data Type Representative value Frame RoboConnect.ST_CartesianPoint This data type holds all the cartesian points x,y,c,a,b,c <p>Lines 1 to 6 populates the \"TableString\" with the vaules of the tool frame from the input \"Frame\". Using the populated table string line 7 populates the command output with the desired string. The index always remains 1 as any stored tool frames can be stored in PLC code for application such as tool changes.  Line 7 populates the task with a task that is available from the task pool.  Line 15 initalises the task with the dashboard port and the command string.  Line 16 adds the task with normal priority to the command Queue.  Line 17 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#settransitionmode","title":"SetTransitionMode","text":""},{"location":"Dobot/dobot_robo_connect_Objects/#settransitionparameter","title":"SetTransitionParameter","text":"Input Variable Data Type Representative value CPratio LREAL The ratio of how accurate the robot path will be when passing through an intermediate point. [1 to 100] <p>Line 1 Check if the cpRatio is within the bounds of the accepted range, if it is then the method continues. Line 2 populates the command string with the correct command string using the commandConstructor. Line 6 populates the task with a task that is available from the task pool.  Line 10 initalises the task with the dashboard port and the command string.  Line 11 adds the task with normal priority to the command Queue.  Line 12 sets the Method true. </p>"},{"location":"Dobot/dobot_robo_connect_Objects/#setuserframe","title":"SetUserFrame","text":"Input Variable Data Type Representative value Frame RoboConnect.ST_CartesianPoint This data type holds all the cartesian points x,y,c,a,b,c <p>Lines 1 to 6 populates the \"TableString\" with the vaules of the tool frame from the input \"Frame\". Using the populated table string line 7 populates the command output with the desired string. The index always remains 1 as any stored tool frames can be stored in PLC code for application such as tool changes.  Line 7 populates the task with a task that is available from the task pool.  Line 15 initalises the task with the dashboard port and the command string.  Line 16 adds the task with normal priority to the command Queue.  Line 17 sets the Method true. </p>"},{"location":"Dobot/dobot_set_connection_params/","title":"Dobot Setup","text":"<p>The dobot requires an ip address to establish the comunication port for the control of the robot. This is held outside of RoboConnect as it is specific to each manufacture of connection. </p>"},{"location":"Dobot/dobot_set_connection_params/#requirements","title":"Requirements","text":"<p>As the comunicaton is based off TCP/IP the libarary uses the TF6310 | TwinCAT 3 TCP/IP. </p>"},{"location":"Dobot/dobot_set_connection_params/#connection-setup","title":"Connection Setup","text":"<p>1) Install the TF6310 software on the target system connected to the robot controller. </p> <p></p> <p>This software is found under the software and tools section of product page of TF6310 | TwinCAT 3 TCP/IP. </p> <p>2) Connect the target to the controller.      A guide from Beckhoff Infosys</p> <p>3) Set the IP address of the port on the target connected to the controller.      A Guide from Microsoft</p> <p>4) In the variable declaration area in TwinCAT add in a variable to hold the IP address. </p> <pre><code>`ip : T_IPv4Addr := '192.168.5.100';`\n</code></pre> <p>5) Define a variable for the type of robot. </p> <pre><code>`dobotCr3 : T_DobotCR;`\n</code></pre> <p>6) Define the command queue and invoker.</p> <pre><code>`commandQueue : T_CommandQueue;`\n\n`commandInvoker : T_CommandInvoker;`\n</code></pre> <p>7) Initalise the robot with the command invoker &amp; command queue.</p> <pre><code>`commandInvoker.Intialise(commandQueue);`\n\n`dobotCR3.Initalise(commandInvoker, commandQueue);`\n\n`dobotCR3.SetConnectionProperties(ip);`\n</code></pre> <p>You robot is now initalised and can start working through the internal statemachine shown below. </p> <p></p>"},{"location":"Unival/unival-connection/","title":"Connect to Unival","text":"<p>The UnivalPLC is a solution provided by Staubli for controlling 4 and 6 axis robots. The comunication is based off of EtherCAT comunication. An internal data type is passed from the PLC layer to the Robot to set and get data. The robot is added an object in the IO of the PLC with it's own XML file desribing the avaiable PDO. The two data types are then linked to the io object. </p>"},{"location":"Unival/unival-inherited-properties/","title":"Inherited Properties","text":"<p>The values that are required by the interface are stored in the axes group and then status which is a data type that contains status variables of the robot status. </p>"},{"location":"images/getting_started/","title":"Getting started","text":"<p>These libraries go hand-in-hand with the VFFS Demo PLC.</p> <p>This sample is created by Beckhoff Automation LLC., and is provided as-is under the MIT license.</p>"},{"location":"images/getting_started/#how-to-get-support","title":"How to get support","text":"<p>For support, raise an issue on GitHub.</p> <p>For general TwinCAT and Beckhoff Product support, please contact your local Beckhoff Support.</p>"},{"location":"images/getting_started/#adding-this-repo-as-a-twincat-plc-library-repository","title":"Adding this repo as a TwinCAT PLC Library Repository","text":"<p>1) Clone this repository to your PC</p> <p>2) Open the Library Repository</p> <p></p> <p>3) Click Edit Locations...</p> <p></p> <p>4) Click Add...</p> <p></p> <p>5) Browse to the folder where you cloned this repository and give the PLC Library Repository a name (e.g. RoboConnect Libraries). NOTE The location MUST point to the \\Library Repository folder under the repo root!</p> <p></p> <p>6) Future updates to the RoboConnect libraries will automatically propogate into TwinCAT XAE by fetching this repo.</p>"}]}