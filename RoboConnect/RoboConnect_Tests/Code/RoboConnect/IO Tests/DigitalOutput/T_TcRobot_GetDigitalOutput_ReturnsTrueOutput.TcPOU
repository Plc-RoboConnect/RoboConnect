<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="T_TcRobot_GetDigitalOutput_ReturnsTrueOutput" Id="{c7c7f40c-db27-4e11-bab7-fbde55546c87}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_RoboConnect_GetDigitalOutput_ReturnsTrueOutput EXTENDS T_UnitTestBase
VAR
  robot : I_RoboConnect;
  timeOutTimer : TON;
  targetDO : UINT;
  targetDoState : BOOL;
  myTestState, prevState :
    (INIT, ARRANGE, ACT, ASSERT) := INIT;
  expected, actual : BOOL;
  counter : UINT;
  returnedTask : I_Task;
  boolResultTask : I_BoolResultTask;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE myTestState OF
  INIT:
    StateChanged();
    myTestState := ARRANGE;

  ARRANGE:
    IF StateChanged() THEN
      expected := targetDoState;
      robot.SetDigitalOutput(targetDO, targetDoState, task => returnedTask);
    END_IF

    IF returnedTask.Done THEN
      myTestState := ACT;
    END_IF

  ACT:
    IF StateChanged() THEN
      robot.GetDigitalOutput(targetDO, task => boolResultTask);
    END_IF

    myTestState := ASSERT;

  ASSERT:
    actual := boolResultTask.Result;
    assertion.AssertEquals_BOOL(expected, actual, 'robot.GetDigitalOutput(targetDO) := TRUE');
    TestFinished();
    myTestState := INIT;

END_CASE

robot.CyclicLogic();
timeOutTimer(IN := myTestState = ASSERT);]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{aa5d93f2-6b07-4e00-8cf7-3c7618eff796}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
  bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
  bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
  TestSuite : tcl_SimpleUnitTestLibrary.I_TestSuite;
  robot : I_TcRobot;
  targetDo : UINT; // the output enumeration
  targetDoState : BOOL; // the state expected (this test attempts to set the value first);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.robot := robot;
THIS^.targetDo := targetDo;
THIS^.targetDoState := targetDoState;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateChanged" Id="{ca63a95d-5a99-46e3-9d9e-83c9324bdd11}">
      <Declaration><![CDATA[METHOD PRIVATE StateChanged : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  myTestState = prevState THEN
  RETURN;
END_IF

prevState := myTestState;
StateChanged := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="WaitForCycles" Id="{34c6c201-802f-4b4b-a9e0-3b488c5cc6d6}">
      <Declaration><![CDATA[METHOD WaitForCycles : BOOL
VAR_INPUT
  maxCount : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[counter := counter + 1;

IF counter = maxCount THEN
  counter := 0;
  WaitForCycles := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="T_TcRobot_GetDigitalOutput_ReturnsTrueOutput">
      <LineId Id="3" Count="30" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_TcRobot_GetDigitalOutput_ReturnsTrueOutput.FB_init">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_TcRobot_GetDigitalOutput_ReturnsTrueOutput.StateChanged">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_TcRobot_GetDigitalOutput_ReturnsTrueOutput.WaitForCycles">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>